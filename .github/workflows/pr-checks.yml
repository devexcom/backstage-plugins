name: PR Checks

on:
  pull_request:
    branches: [main]

jobs:
  changeset-check:
    name: Changeset Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login != 'renovate[bot]'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check for changesets
        run: |
          # Check if this PR has changes in workspaces directory (plugin changes)
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          PLUGIN_CHANGES=$(echo "$CHANGED_FILES" | grep "^workspaces/" || true)

          if [ -n "$PLUGIN_CHANGES" ]; then
            echo "Changes detected in plugin directories:"
            echo "$PLUGIN_CHANGES"
            echo ""
            echo "Checking for changesets..."
            
            # Check if there are any changeset files
            CHANGESET_FILES=$(echo "$CHANGED_FILES" | grep "^\.changeset/.*\.md$" || true)
            
            if [ -z "$CHANGESET_FILES" ]; then
              echo "❌ No changesets found for plugin changes"
              echo ""
              echo "Please run 'yarn changeset' to create a changeset for your plugin changes."
              echo "This ensures proper versioning and release notes for changed plugins."
              exit 1
            else
              echo "✅ Changesets found: $CHANGESET_FILES"
            fi
          else
            echo "No changes in plugin directories, skipping changeset check"
          fi

  pr-title-check:
    name: PR Title Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login != 'dependabot[bot]'
    steps:
      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure which types are allowed (newline delimited)
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
          # Configure which scopes are allowed
          scopes: |
            catalog-cards
            linkedin-learning-card
            deps
            deps-dev
            ci
            repo
          requireScope: false
          # Skip validation for dependabot PRs with malformed titles
          headerPattern: '^(\w*)(?:\(([\w\$\.\-\* ]*)\))?\: (.*)$'

  plugin-validation:
    name: Plugin Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Validate plugin structure
        run: |
          # Find all package.json files in workspaces, excluding node_modules
          find workspaces -name "package.json" -type f -not -path "*/node_modules/*" | while read pkg; do
            echo "Validating plugin: $pkg"
            
            # Check required fields in package.json
            if ! jq -e '.name' "$pkg" >/dev/null 2>&1; then
              echo "❌ Missing 'name' field in $pkg"
              exit 1
            fi
            
            if ! jq -e '.version' "$pkg" >/dev/null 2>&1; then
              echo "❌ Missing 'version' field in $pkg"  
              exit 1
            fi
            
            if ! jq -e '.description' "$pkg" >/dev/null 2>&1; then
              echo "❌ Missing 'description' field in $pkg"
              exit 1
            fi
            
            # Check for README.md in plugin directory
            plugin_dir=$(dirname "$pkg")
            if [ ! -f "$plugin_dir/README.md" ]; then
              echo "❌ Missing README.md in $plugin_dir"
              exit 1
            fi
            
            echo "✅ Plugin validation passed for $pkg"
          done
