name: Release

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.repository_owner != 'renovate[bot]'
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
          # Use a personal access token so that the changesets action can trigger other workflows
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20.x
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          # Azure SDK packages have Node 20+ requirements, override for Node 18 CI
          yarn config set ignore-engines true
          yarn install --frozen-lockfile

      - name: Run tests
        run: yarn test:coverage

      - name: Run linting
        run: yarn lint:all

      - name: Build packages
        run: yarn build:all

      - name: Check for unpublished versions
        id: unpublished-check
        run: |
          # Check if any workspace packages have versions not published to npm
          HAS_UNPUBLISHED=false

          for workspace in workspaces/*/package.json; do
            if [ -f "$workspace" ]; then
              PACKAGE_NAME=$(jq -r '.name' "$workspace")
              LOCAL_VERSION=$(jq -r '.version' "$workspace")
              
              # Skip if package name or version is null
              if [ "$PACKAGE_NAME" != "null" ] && [ "$LOCAL_VERSION" != "null" ]; then
                # Check if this version exists on npm
                if ! npm view "$PACKAGE_NAME@$LOCAL_VERSION" version >/dev/null 2>&1; then
                  echo "ðŸ“¦ Found unpublished version: $PACKAGE_NAME@$LOCAL_VERSION"
                  HAS_UNPUBLISHED=true
                fi
              fi
            fi
          done

          echo "has-unpublished=$HAS_UNPUBLISHED" >> $GITHUB_OUTPUT

      - name: Publish unpublished versions
        id: publish-existing
        if: steps.unpublished-check.outputs.has-unpublished == 'true'
        run: |
          echo "ðŸš€ Publishing existing unpublished versions..."
          yarn changeset publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check for changesets
        id: changesets-check
        run: |
          if yarn changeset status --json | jq -e '.releases | length > 0' > /dev/null 2>&1; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release Pull Request or Publish
        id: changesets
        if: steps.changesets-check.outputs.has-changesets == 'true'
        uses: changesets/action@v1
        with:
          version: yarn changeset version
          publish: yarn changeset publish --access public
          title: 'chore: version packages'
          commit: 'chore: version packages'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Summary
        if: steps.changesets.outputs.published == 'true' || steps.publish-existing.outcome == 'success'
        run: |
          echo "ðŸŽ‰ Published packages:"
          if [ "${{ steps.changesets.outputs.published }}" == "true" ]; then
            echo "ðŸ“¦ From changesets: ${{ steps.changesets.outputs.publishedPackages }}"
          fi
          if [ "${{ steps.publish-existing.outcome }}" == "success" ]; then
            echo "ðŸ“¦ From unpublished versions: Published existing versions"
          fi
